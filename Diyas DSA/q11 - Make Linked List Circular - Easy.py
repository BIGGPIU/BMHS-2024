"""
For this problem you have to make a linked list circular

or to put it in simple terms make the first item in the linked list go to the last item in the linked list

this problems basically the same no matter what you do so theres only one test case

"""

class TreeNode:
    def __init__(self, value=None,next=None):
        self.value = value
        self.next = next

def circular(head:TreeNode) -> list[int]:
    # I dont feel like making this work just manifest your code into working
    pass























































































































































































































































































































































































def CreateLLfromTree(List):
    head = TreeNode(List[0])
    pointer = TreeNode()
    head.next = pointer
    i = 1 
    while i != len(List):
        pointer.value = List[i]
        pointer.next = TreeNode()
        pointer = pointer.next
        i+=1
    return head

def myanswer(head:TreeNode):
    shead = head
    while head.next.value != None:
        head = head.next
    head.next = shead
    return shead

def main() -> str:
    qs = [
        CreateLLfromTree([1,2,3,4,5]),
        CreateLLfromTree([1,2,3,4,5])
    ]

    if myanswer(qs[0]) != circular(qs[1]):
        return f'''
Failed testcase {1}
        '''

    return "you passed"

if __name__ == "__main__":
    print(main())